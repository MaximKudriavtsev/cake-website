services:
  website:
    image: maximkudryavtsev/cakes-website
    build:
      context: .
    container_name: website
    restart: always
    ports:
      - "80:3000"
    environment:
      DB_USERNAME: root
      DB_PASSWORD: example
      DB_URL: mongodb://root:example@stage-mongo:27017/app?authSource=admin
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - node-network

  mongo:
    image: mongo:8.0 
    container_name: stage-mongo
    restart: always
    ports:
      - "27017:27017" # Expose MongoDB on the default port
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://root:example@stage-mongo:27017/app?authSource=admin --quiet
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 5s
    volumes:
      - mongo-data:/data/db # Persist MongoDB data
      - mongo-config:/data/configdb # Persist MongoDB configuration
    networks:
      - node-network

  telegram:
    image: telegram-saving-bot
    container_name: telegram-saving-bot
    restart: always
    environment:
      MODE: production
      DB_USERNAME: root
      DB_PASSWORD: example
      DB_URL: mongodb://root:example@stage-mongo:27017/app?authSource=admin
      TELEGRAM_TOKEN: 8085538207:AAFuowK5rdpJDGggeKeY8sr-U21GbO-8-y8
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - node-network

volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local

networks:
  node-network:
    driver: bridge